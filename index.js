const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const cors = require("cors");

const { initializeApp } = require('firebase/app');
const { getFirestore, doc, setDoc, collection } = require('firebase/firestore');

const firebaseConfig = {
  apiKey: "AIzaSyAIN5YHKjJk6eCU00XEjGkrFHrxQyITgd4",
  authDomain: "tg-web-app-bot-8d79b.firebaseapp.com",
  projectId: "tg-web-app-bot-8d79b",
  storageBucket: "tg-web-app-bot-8d79b.appspot.com",
  messagingSenderId: "494356709244",
  appId: "1:494356709244:web:d12c89285dac6add6d6ef9",
  measurementId: "G-M9J3RSM23P"
};
const fbapp = initializeApp(firebaseConfig);
const db = getFirestore(fbapp);

const token = "6702075740:AAEDAjNrX1hVS5TJd9NqFYr-8FmQpWY0Lm0"; 
const webAppUrl = "https://deft-caramel-01f656.netlify.app/";

const bot = new TelegramBot(token, { polling: true });
const app = express();

app.use(express.json());

const corsOptions = {
  origin: 'https://deft-caramel-01f656.netlify.app',
  methods: ['GET', 'PUT', 'POST', 'PATCH', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
};

app.use(cors(corsOptions));

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === '/start') {
    await bot.sendMessage(chatId, '–ù–∏–∂—á–µ –∑\'—è–≤–∏—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É', {
      reply_markup: {
        keyboard: [
          [{ text: '–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É', web_app: { url: webAppUrl + 'form' } }],
        ],
        one_time_keyboard: true
      }
    });
  }

  if (msg?.web_app_data?.data) {
    try {
      const data = JSON.parse(msg.web_app_data.data);
      
      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ Firestore
      const docRef = doc(collection(db, "orders"));
      await setDoc(docRef, data);

      let deliveryMethodText = '';
      switch(data.deliveryMethod) {
        case 'courier':
          deliveryMethodText = '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä\'—î—Ä–æ–º';
          break;
        case 'pickup':
          deliveryMethodText = '–°–∞–º–æ–≤–∏–≤—ñ–∑';
          break;
        default:
          deliveryMethodText = '–ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ';
      }

      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
      await bot.sendMessage(chatId, '*–î—è–∫—É—î–º–æ –∑–∞ –Ω–∞–¥–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é!*', { parse_mode: 'Markdown' });
      await bot.sendMessage(chatId, `*üë§Ô∏è –í–∞—à–µ –ü–Ü–ë:* _${data?.name}_`, { parse_mode: 'Markdown' });
      await bot.sendMessage(chatId, `*üì±Ô∏è –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:* _${data?.numberphone}_`, { parse_mode: 'Markdown' });
      await bot.sendMessage(chatId, `*üèôÔ∏è –í–∞—à–µ –º—ñ—Å—Ç–æ:* _${data?.city}_`, { parse_mode: 'Markdown' });
      await bot.sendMessage(chatId, `*üìç –í–∞—à–∞ –∞–¥—Ä–µ—Å–∞:* _${data?.street}_`, { parse_mode: 'Markdown' });
      await bot.sendMessage(chatId, `*üöï –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:* _${deliveryMethodText}_`, { parse_mode: 'Markdown' });

      if (data.deliveryMethod !== 'pickup') {
        // –¢—ñ–ª—å–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏, —è–∫–∏–π –Ω–µ —î —Å–∞–º–æ–≤–∏–≤–æ–∑–æ–º
        await bot.sendMessage(chatId, `*üíµ –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:* _${data?.deliveryPrice}_`, { parse_mode: 'Markdown' });
        await bot.sendMessage(chatId, `*‚åö –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* _${data.deliveryTime ? `${data.deliveryTime}` : '–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}_`, { parse_mode: 'Markdown' });
      } else {
        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É
        await bot.sendMessage(chatId, `*üìç –ê–¥—Ä–µ—Å–∞ –¥–ª—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É:* _–≤—É–ª–∏—Ü—è –†—É—Å—å–∫–∞, 209-–ë, –ß–µ—Ä–Ω—ñ–≤—Ü—ñ, –ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å, –£–∫—Ä–∞—ó–Ω–∞_`, { parse_mode: 'Markdown' });
      }

      setTimeout(async () => {
        await bot.sendMessage(chatId, '–ó–∞—Ö–æ–¥—å—Ç–µ –≤ –Ω–∞—à —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω –∑–∞ –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', web_app: { url: webAppUrl } }],
            ]
          }
        });
      }, 3000); 

    } catch (e) {
      console.error(e);
    }
  }
});

app.post('/web-data', async (req, res) => {
  const { queryId, products = [], totalPrice, deliveryPrice } = req.body;

  try {
    // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ —É —á–∏—Å–ª–∞ –¥–ª—è totalPrice —ñ deliveryPrice
    const numericTotalPrice = Number(totalPrice);
    const numericDeliveryPrice = Number(deliveryPrice.replace(' –≥—Ä–Ω', '')); // –≤–∏–¥–∞–ª—è—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—É —á–∞—Å—Ç–∏–Ω—É " –≥—Ä–Ω"

    if (isNaN(numericTotalPrice) || isNaN(numericDeliveryPrice)) {
      throw new Error('Total price or delivery price is not a valid number.');
    }

    const totalOrderPrice = numericTotalPrice + numericDeliveryPrice;

    await bot.answerWebAppQuery(queryId, {
      type: 'article',
      id: queryId,
      title: '–£—Å–ø—ñ—à–Ω–∞ –ø–æ–∫—É–ø–∫–∞',
      input_message_content: {
        message_text: [
          '*–í—ñ—Ç–∞—î–º–æ –∑ –ø–æ–∫—É–ø–∫–æ—é!*',
          `*–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:* _${numericTotalPrice.toFixed(2)}‚Ç¥_`,
          `*–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:* _${numericDeliveryPrice.toFixed(2)}‚Ç¥_`,
          `*–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –æ–ø–ª–∞—Ç–∏:* _${totalOrderPrice.toFixed(2)}‚Ç¥_`,
          '*–©–æ —Å–∞–º–µ –≤–∏ –∑–∞–º–æ–≤–∏–ª–∏:*',
          ...products.map(item => `‚Ä¢ _${item.title}_`)
        ].join('\n'),
        parse_mode: 'Markdown'
      }
    });

    res.status(200).json({});
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: e.message });
  }
});


const PORT = 8000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});