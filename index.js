const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const cors = require("cors");

const { initializeApp } = require('firebase/app');
const { getFirestore, doc, setDoc, collection } = require('firebase/firestore');

let price = 0;

// const firebaseConfig = {
  // apiKey: "AIzaSyAIN5YHKjJk6eCU00XEjGkrFHrxQyITgd4",
  // authDomain: "tg-web-app-bot-8d79b.firebaseapp.com",
  // projectId: "tg-web-app-bot-8d79b",
  // storageBucket: "tg-web-app-bot-8d79b.appspot.com",
  // messagingSenderId: "494356709244",
  // appId: "1:494356709244:web:d12c89285dac6add6d6ef9",
  // measurementId: "G-M9J3RSM23P"
// };
// const fbapp = initializeApp(firebaseConfig);
// const db = getFirestore(fbapp);

const token = "6702075740:AAEDAjNrX1hVS5TJd9NqFYr-8FmQpWY0Lm0"; 
const webAppUrl = "https://deft-caramel-01f656.netlify.app/";

const bot = new TelegramBot(token, { polling: true });
const app = express();

app.use(express.json());

const corsOptions = {
  origin: "https://deft-caramel-01f656.netlify.app",
  methods: ["GET", "PUT", "POST", "PATCH", "DELETE", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization"],
  credentials: true,
};

app.use(cors({
  origin: 'https://deft-caramel-01f656.netlify.app',
  methods: ['GET', 'PUT', 'POST', 'PATCH', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
}));

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === '/start') {
    await bot.sendMessage(chatId, '–ù–∏–∂—á–µ –∑\'—è–≤–∏—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É', {
      reply_markup: {
        keyboard: [
          [{ text: '–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É', web_app: { url: webAppUrl + 'form' } }],
        ],
        one_time_keyboard: true
      }
    });
  }

  // –û–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤–µ–±-–¥–æ–¥–∞—Ç–∫–∞
  if (msg?.web_app_data?.data) {
    try {
      const data = JSON.parse(msg.web_app_data.data);

      price = data.deliveryPrice;  

      let deliveryMethodText = '';
      switch(data.deliveryMethod) {
        case 'courier':
          deliveryMethodText = '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä\'—î—Ä–æ–º';
          break;
        case 'pickup':
          deliveryMethodText = '–°–∞–º–æ–≤–∏–≤—ñ–∑';
          break;
        default:
          deliveryMethodText = '–ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ';
      }

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      await bot.sendMessage(chatId, '*–î—è–∫—É—î–º–æ –∑–∞ –Ω–∞–¥–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é!*', { parse_mode: 'Markdown' });
      await bot.sendMessage(chatId, `*üë§Ô∏è –í–∞—à–µ –ü–Ü–ë:* _${data?.name}_`, { parse_mode: 'Markdown' });
      await bot.sendMessage(chatId, `*üì±Ô∏è –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:* _${data?.numberphone}_`, { parse_mode: 'Markdown' });
      await bot.sendMessage(chatId, `*üèôÔ∏è –í–∞—à–µ –º—ñ—Å—Ç–æ:* _${data?.city}_`, { parse_mode: 'Markdown' });
      await bot.sendMessage(chatId, `*üìç –í–∞—à–∞ –∞–¥—Ä–µ—Å–∞:* _${data?.street}_`, { parse_mode: 'Markdown' });
      await bot.sendMessage(chatId, `*üöï –ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:* _${deliveryMethodText}_`, { parse_mode: 'Markdown' });

     if (data.deliveryMethod !== "pickup") {
        // –¢—ñ–ª—å–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏, —è–∫–∏–π –Ω–µ —î —Å–∞–º–æ–≤–∏–≤–æ–∑–æ–º
        let deliveryTimeText = data.deliveryTime
          ? data.deliveryTime.startsWith
            ? `${data.deliveryTime}`
            : `${data.deliveryTime}`
          : "–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ";

        await bot.sendMessage(
          chatId,
          `*üíµ –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:* _${price}_`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
          { parse_mode: "Markdown" }
        );
        await bot.sendMessage(
          chatId,
          `*‚åö –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* _${
            data.deliveryTime
              ? `${data.deliveryTime}`
              : "–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
          }_`,
          { parse_mode: "Markdown" }
        );
      }

      // –ß–µ–∫–∞—î–º–æ 3 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      setTimeout(async () => {
        await bot.sendMessage(chatId, '–ó–∞—Ö–æ–¥—å—Ç–µ –≤ –Ω–∞—à —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω –∑–∞ –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', web_app: { url: webAppUrl } }],
            ]
          }
        });
      }, 3000); 

    } catch (e) {
      console.error(e);
    }
  }
});

app.post('/confirm-purchase', async (req, res) => {
  const { products, price, queryId } = req.body; // –ü—Ä–∏–ø—É—Å–∫–∞—é, —â–æ 'price' —Ü–µ –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤
  const numericTotalPrice = products.reduce((acc, item) => acc + item.price * item.quantity, 0);
  
  // –î–æ–¥–∞—î–º–æ numericTotalPrice –¥–æ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞–≤–∫–∏, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const totalOrderPrice = numericTotalPrice + price;

  try {
    await bot.answerWebAppQuery(queryId, {
      type: 'article',
      id: queryId,
      title: '–£—Å–ø—ñ—à–Ω–∞ –ø–æ–∫—É–ø–∫–∞',
      input_message_content: {
        message_text: [
          '*–í—ñ—Ç–∞—î–º–æ –∑ –ø–æ–∫—É–ø–∫–æ—é!*',
          `*–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:* _${numericTotalPrice.toFixed(2)}‚Ç¥_`,
          `*–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:* _${price.toFixed(2)}‚Ç¥_`,
          `*–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –æ–ø–ª–∞—Ç–∏:* _${totalOrderPrice.toFixed(2)}‚Ç¥_`,
          '*–©–æ —Å–∞–º–µ –≤–∏ –∑–∞–º–æ–≤–∏–ª–∏:*',
          ...products.map(item => `‚Ä¢ _${item.title}_ (${item.quantity} x ${item.price.toFixed(2)}‚Ç¥)`)
        ].join('\n'),
        parse_mode: 'Markdown'
      }
    });

    res.status(200).json({});
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: e.message });
  }
});

const PORT = 8000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
